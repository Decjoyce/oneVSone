//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/PlayerInputFolder/PlayerControllers.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControllers: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControllers()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControllers"",
    ""maps"": [
        {
            ""name"": ""PlayerMovement"",
            ""id"": ""584b57ef-da1c-4920-9639-39df0b57ea0a"",
            ""actions"": [
                {
                    ""name"": ""movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""0450838a-1fc8-489b-9442-d020f799d22c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""shoot"",
                    ""type"": ""Button"",
                    ""id"": ""bf735509-4820-477f-ace7-d6436691cd55"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""pause"",
                    ""type"": ""Button"",
                    ""id"": ""5be25869-22b1-482c-873d-09d776c252ac"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ready"",
                    ""type"": ""Button"",
                    ""id"": ""8eb3f31f-0d89-4d0f-801d-0146b8f73483"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""changeGamemodeUp"",
                    ""type"": ""Button"",
                    ""id"": ""5af9432c-d40c-4b2f-b3cd-765749531672"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""changeGamemodeDown"",
                    ""type"": ""Button"",
                    ""id"": ""ada8cc1f-350c-4804-87e5-10252e606dfd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""changeMapUp"",
                    ""type"": ""Button"",
                    ""id"": ""22b1206b-06c9-4274-b569-e47a3c9ad54d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""changeMapDown"",
                    ""type"": ""Button"",
                    ""id"": ""ffd0324b-4eb6-4dba-bf2b-ca969f83ec83"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e4cf027f-fb2e-4e4d-ad2e-13a7244a4337"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4409b6c4-70c0-4183-8b3e-1095ee613cf0"",
                    ""path"": ""<DualShockGamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ee58edcf-559d-4750-b47b-22175e709bb2"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4d8f6793-2e0a-4b15-b88a-82c081d62989"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""47e59a2c-240d-4032-919b-2342099d1853"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ready"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9a602296-78e3-440e-ab1b-6b47d8ff193d"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""changeGamemodeDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""71ae8592-b0e5-4f6e-9ed4-59969679cafe"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""changeMapUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""328a529e-fb4e-4e2f-8796-f5927761d88b"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""changeMapDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2fd3ee4c-8a1a-4f31-81ef-49150c8e7d57"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""changeGamemodeUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""gamepad"",
            ""bindingGroup"": ""gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // PlayerMovement
        m_PlayerMovement = asset.FindActionMap("PlayerMovement", throwIfNotFound: true);
        m_PlayerMovement_movement = m_PlayerMovement.FindAction("movement", throwIfNotFound: true);
        m_PlayerMovement_shoot = m_PlayerMovement.FindAction("shoot", throwIfNotFound: true);
        m_PlayerMovement_pause = m_PlayerMovement.FindAction("pause", throwIfNotFound: true);
        m_PlayerMovement_ready = m_PlayerMovement.FindAction("ready", throwIfNotFound: true);
        m_PlayerMovement_changeGamemodeUp = m_PlayerMovement.FindAction("changeGamemodeUp", throwIfNotFound: true);
        m_PlayerMovement_changeGamemodeDown = m_PlayerMovement.FindAction("changeGamemodeDown", throwIfNotFound: true);
        m_PlayerMovement_changeMapUp = m_PlayerMovement.FindAction("changeMapUp", throwIfNotFound: true);
        m_PlayerMovement_changeMapDown = m_PlayerMovement.FindAction("changeMapDown", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerMovement
    private readonly InputActionMap m_PlayerMovement;
    private List<IPlayerMovementActions> m_PlayerMovementActionsCallbackInterfaces = new List<IPlayerMovementActions>();
    private readonly InputAction m_PlayerMovement_movement;
    private readonly InputAction m_PlayerMovement_shoot;
    private readonly InputAction m_PlayerMovement_pause;
    private readonly InputAction m_PlayerMovement_ready;
    private readonly InputAction m_PlayerMovement_changeGamemodeUp;
    private readonly InputAction m_PlayerMovement_changeGamemodeDown;
    private readonly InputAction m_PlayerMovement_changeMapUp;
    private readonly InputAction m_PlayerMovement_changeMapDown;
    public struct PlayerMovementActions
    {
        private @PlayerControllers m_Wrapper;
        public PlayerMovementActions(@PlayerControllers wrapper) { m_Wrapper = wrapper; }
        public InputAction @movement => m_Wrapper.m_PlayerMovement_movement;
        public InputAction @shoot => m_Wrapper.m_PlayerMovement_shoot;
        public InputAction @pause => m_Wrapper.m_PlayerMovement_pause;
        public InputAction @ready => m_Wrapper.m_PlayerMovement_ready;
        public InputAction @changeGamemodeUp => m_Wrapper.m_PlayerMovement_changeGamemodeUp;
        public InputAction @changeGamemodeDown => m_Wrapper.m_PlayerMovement_changeGamemodeDown;
        public InputAction @changeMapUp => m_Wrapper.m_PlayerMovement_changeMapUp;
        public InputAction @changeMapDown => m_Wrapper.m_PlayerMovement_changeMapDown;
        public InputActionMap Get() { return m_Wrapper.m_PlayerMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerMovementActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Add(instance);
            @movement.started += instance.OnMovement;
            @movement.performed += instance.OnMovement;
            @movement.canceled += instance.OnMovement;
            @shoot.started += instance.OnShoot;
            @shoot.performed += instance.OnShoot;
            @shoot.canceled += instance.OnShoot;
            @pause.started += instance.OnPause;
            @pause.performed += instance.OnPause;
            @pause.canceled += instance.OnPause;
            @ready.started += instance.OnReady;
            @ready.performed += instance.OnReady;
            @ready.canceled += instance.OnReady;
            @changeGamemodeUp.started += instance.OnChangeGamemodeUp;
            @changeGamemodeUp.performed += instance.OnChangeGamemodeUp;
            @changeGamemodeUp.canceled += instance.OnChangeGamemodeUp;
            @changeGamemodeDown.started += instance.OnChangeGamemodeDown;
            @changeGamemodeDown.performed += instance.OnChangeGamemodeDown;
            @changeGamemodeDown.canceled += instance.OnChangeGamemodeDown;
            @changeMapUp.started += instance.OnChangeMapUp;
            @changeMapUp.performed += instance.OnChangeMapUp;
            @changeMapUp.canceled += instance.OnChangeMapUp;
            @changeMapDown.started += instance.OnChangeMapDown;
            @changeMapDown.performed += instance.OnChangeMapDown;
            @changeMapDown.canceled += instance.OnChangeMapDown;
        }

        private void UnregisterCallbacks(IPlayerMovementActions instance)
        {
            @movement.started -= instance.OnMovement;
            @movement.performed -= instance.OnMovement;
            @movement.canceled -= instance.OnMovement;
            @shoot.started -= instance.OnShoot;
            @shoot.performed -= instance.OnShoot;
            @shoot.canceled -= instance.OnShoot;
            @pause.started -= instance.OnPause;
            @pause.performed -= instance.OnPause;
            @pause.canceled -= instance.OnPause;
            @ready.started -= instance.OnReady;
            @ready.performed -= instance.OnReady;
            @ready.canceled -= instance.OnReady;
            @changeGamemodeUp.started -= instance.OnChangeGamemodeUp;
            @changeGamemodeUp.performed -= instance.OnChangeGamemodeUp;
            @changeGamemodeUp.canceled -= instance.OnChangeGamemodeUp;
            @changeGamemodeDown.started -= instance.OnChangeGamemodeDown;
            @changeGamemodeDown.performed -= instance.OnChangeGamemodeDown;
            @changeGamemodeDown.canceled -= instance.OnChangeGamemodeDown;
            @changeMapUp.started -= instance.OnChangeMapUp;
            @changeMapUp.performed -= instance.OnChangeMapUp;
            @changeMapUp.canceled -= instance.OnChangeMapUp;
            @changeMapDown.started -= instance.OnChangeMapDown;
            @changeMapDown.performed -= instance.OnChangeMapDown;
            @changeMapDown.canceled -= instance.OnChangeMapDown;
        }

        public void RemoveCallbacks(IPlayerMovementActions instance)
        {
            if (m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerMovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerMovementActions @PlayerMovement => new PlayerMovementActions(this);
    private int m_gamepadSchemeIndex = -1;
    public InputControlScheme gamepadScheme
    {
        get
        {
            if (m_gamepadSchemeIndex == -1) m_gamepadSchemeIndex = asset.FindControlSchemeIndex("gamepad");
            return asset.controlSchemes[m_gamepadSchemeIndex];
        }
    }
    public interface IPlayerMovementActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
        void OnReady(InputAction.CallbackContext context);
        void OnChangeGamemodeUp(InputAction.CallbackContext context);
        void OnChangeGamemodeDown(InputAction.CallbackContext context);
        void OnChangeMapUp(InputAction.CallbackContext context);
        void OnChangeMapDown(InputAction.CallbackContext context);
    }
}
